import os
from fernet_utils import decrypt_env_value
from faucetpay_client import FaucetPayClient
from telegram_bot import start_bot

def check_env_vars():
    """V√©rifie la pr√©sence des variables d'environnement essentielles"""
    required_vars = ["FERNET_KEY", "FAUCETPAY_API_KEY_ENCRYPTED", "TELEGRAM_BOT_TOKEN"]
    missing = [v for v in required_vars if not os.getenv(v)]
    if missing:
        raise EnvironmentError(f"‚ùå Variables manquantes : {', '.join(missing)}")
    print("‚úÖ Toutes les variables d'environnement n√©cessaires sont pr√©sentes.")


def test_faucetpay_connection():
    """Teste la connexion √† FaucetPay"""
    print("üîÑ Test de connexion √† FaucetPay...")
    try:
        fp = FaucetPayClient()
        balance = fp.get_balance("BTC")
        if balance.get("status") == 200:
            print(f"üí∞ Solde FaucetPay r√©cup√©r√© avec succ√®s : {balance.get('balance', 'N/A')} BTC")
        else:
            print(f"‚ö†Ô∏è R√©ponse inattendue de FaucetPay : {balance}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test FaucetPay : {e}")


def launch_bot():
    """D√©marre le bot Telegram"""
    print("ü§ñ Lancement du bot Telegram Bitcoin09...")
    try:
        start_bot()
    except Exception as e:
        print(f"‚ùå Erreur au d√©marrage du bot : {e}")


if __name__ == "__main__":
    print("üöÄ Initialisation du projet Bitcoin09_final...")
    check_env_vars()
    test_faucetpay_connection()
    launch_bot()
